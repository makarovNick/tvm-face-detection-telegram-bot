#[version = "0.0.5"]
def @main(%input: Tensor[(1, 128, 128, 3), float32] /* ty=Tensor[(1, 128, 128, 3), float32] */, %v_param_1: Tensor[(5, 5, 3, 24), float32] /* ty=Tensor[(5, 5, 3, 24), float32] */, %v_param_2: Tensor[(24), float32] /* ty=Tensor[(24), float32] */, %v_param_3: Tensor[(3, 3, 24, 1), float32] /* ty=Tensor[(3, 3, 24, 1), float32] */, %v_param_4: Tensor[(24), float32] /* ty=Tensor[(24), float32] */, %v_param_5: Tensor[(1, 1, 24, 24), float32] /* ty=Tensor[(1, 1, 24, 24), float32] */, %v_param_6: Tensor[(24), float32] /* ty=Tensor[(24), float32] */, %v_param_7: Tensor[(3, 3, 24, 1), float32] /* ty=Tensor[(3, 3, 24, 1), float32] */, %v_param_8: Tensor[(24), float32] /* ty=Tensor[(24), float32] */, %v_param_9: Tensor[(1, 1, 24, 28), float32] /* ty=Tensor[(1, 1, 24, 28), float32] */, %v_param_10: Tensor[(28), float32] /* ty=Tensor[(28), float32] */, %v_param_11: Tensor[(3, 3, 28, 1), float32] /* ty=Tensor[(3, 3, 28, 1), float32] */, %v_param_12: Tensor[(28), float32] /* ty=Tensor[(28), float32] */, %v_param_13: Tensor[(1, 1, 28, 32), float32] /* ty=Tensor[(1, 1, 28, 32), float32] */, %v_param_14: Tensor[(32), float32] /* ty=Tensor[(32), float32] */, %v_param_15: Tensor[(3, 3, 32, 1), float32] /* ty=Tensor[(3, 3, 32, 1), float32] */, %v_param_16: Tensor[(32), float32] /* ty=Tensor[(32), float32] */, %v_param_17: Tensor[(1, 1, 32, 36), float32] /* ty=Tensor[(1, 1, 32, 36), float32] */, %v_param_18: Tensor[(36), float32] /* ty=Tensor[(36), float32] */, %v_param_19: Tensor[(3, 3, 36, 1), float32] /* ty=Tensor[(3, 3, 36, 1), float32] */, %v_param_20: Tensor[(36), float32] /* ty=Tensor[(36), float32] */, %v_param_21: Tensor[(1, 1, 36, 42), float32] /* ty=Tensor[(1, 1, 36, 42), float32] */, %v_param_22: Tensor[(42), float32] /* ty=Tensor[(42), float32] */, %v_param_23: Tensor[(3, 3, 42, 1), float32] /* ty=Tensor[(3, 3, 42, 1), float32] */, %v_param_24: Tensor[(42), float32] /* ty=Tensor[(42), float32] */, %v_param_25: Tensor[(1, 1, 42, 48), float32] /* ty=Tensor[(1, 1, 42, 48), float32] */, %v_param_26: Tensor[(48), float32] /* ty=Tensor[(48), float32] */, %v_param_27: Tensor[(3, 3, 48, 1), float32] /* ty=Tensor[(3, 3, 48, 1), float32] */, %v_param_28: Tensor[(48), float32] /* ty=Tensor[(48), float32] */, %v_param_29: Tensor[(1, 1, 48, 56), float32] /* ty=Tensor[(1, 1, 48, 56), float32] */, %v_param_30: Tensor[(56), float32] /* ty=Tensor[(56), float32] */, %v_param_31: Tensor[(3, 3, 56, 1), float32] /* ty=Tensor[(3, 3, 56, 1), float32] */, %v_param_32: Tensor[(56), float32] /* ty=Tensor[(56), float32] */, %v_param_33: Tensor[(1, 1, 56, 64), float32] /* ty=Tensor[(1, 1, 56, 64), float32] */, %v_param_34: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %v_param_35: Tensor[(3, 3, 64, 1), float32] /* ty=Tensor[(3, 3, 64, 1), float32] */, %v_param_36: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %v_param_37: Tensor[(1, 1, 64, 72), float32] /* ty=Tensor[(1, 1, 64, 72), float32] */, %v_param_38: Tensor[(72), float32] /* ty=Tensor[(72), float32] */, %v_param_39: Tensor[(3, 3, 72, 1), float32] /* ty=Tensor[(3, 3, 72, 1), float32] */, %v_param_40: Tensor[(72), float32] /* ty=Tensor[(72), float32] */, %v_param_41: Tensor[(1, 1, 72, 80), float32] /* ty=Tensor[(1, 1, 72, 80), float32] */, %v_param_42: Tensor[(80), float32] /* ty=Tensor[(80), float32] */, %v_param_43: Tensor[(3, 3, 80, 1), float32] /* ty=Tensor[(3, 3, 80, 1), float32] */, %v_param_44: Tensor[(80), float32] /* ty=Tensor[(80), float32] */, %v_param_45: Tensor[(1, 1, 80, 88), float32] /* ty=Tensor[(1, 1, 80, 88), float32] */, %v_param_46: Tensor[(88), float32] /* ty=Tensor[(88), float32] */, %v_param_71: Tensor[(1, 1, 88, 32), float32] /* ty=Tensor[(1, 1, 88, 32), float32] */, %v_param_72: Tensor[(32), float32] /* ty=Tensor[(32), float32] */, %v_param_47: Tensor[(3, 3, 88, 1), float32] /* ty=Tensor[(3, 3, 88, 1), float32] */, %v_param_48: Tensor[(88), float32] /* ty=Tensor[(88), float32] */, %v_param_49: Tensor[(1, 1, 88, 96), float32] /* ty=Tensor[(1, 1, 88, 96), float32] */, %v_param_50: Tensor[(96), float32] /* ty=Tensor[(96), float32] */, %v_param_51: Tensor[(3, 3, 96, 1), float32] /* ty=Tensor[(3, 3, 96, 1), float32] */, %v_param_52: Tensor[(96), float32] /* ty=Tensor[(96), float32] */, %v_param_53: Tensor[(1, 1, 96, 96), float32] /* ty=Tensor[(1, 1, 96, 96), float32] */, %v_param_54: Tensor[(96), float32] /* ty=Tensor[(96), float32] */, %v_param_55: Tensor[(3, 3, 96, 1), float32] /* ty=Tensor[(3, 3, 96, 1), float32] */, %v_param_56: Tensor[(96), float32] /* ty=Tensor[(96), float32] */, %v_param_57: Tensor[(1, 1, 96, 96), float32] /* ty=Tensor[(1, 1, 96, 96), float32] */, %v_param_58: Tensor[(96), float32] /* ty=Tensor[(96), float32] */, %v_param_59: Tensor[(3, 3, 96, 1), float32] /* ty=Tensor[(3, 3, 96, 1), float32] */, %v_param_60: Tensor[(96), float32] /* ty=Tensor[(96), float32] */, %v_param_61: Tensor[(1, 1, 96, 96), float32] /* ty=Tensor[(1, 1, 96, 96), float32] */, %v_param_62: Tensor[(96), float32] /* ty=Tensor[(96), float32] */, %v_param_63: Tensor[(3, 3, 96, 1), float32] /* ty=Tensor[(3, 3, 96, 1), float32] */, %v_param_64: Tensor[(96), float32] /* ty=Tensor[(96), float32] */, %v_param_65: Tensor[(1, 1, 96, 96), float32] /* ty=Tensor[(1, 1, 96, 96), float32] */, %v_param_66: Tensor[(96), float32] /* ty=Tensor[(96), float32] */, %v_param_73: Tensor[(1, 1, 96, 96), float32] /* ty=Tensor[(1, 1, 96, 96), float32] */, %v_param_74: Tensor[(96), float32] /* ty=Tensor[(96), float32] */, %v_param_67: Tensor[(1, 1, 88, 2), float32] /* ty=Tensor[(1, 1, 88, 2), float32] */, %v_param_68: Tensor[(2), float32] /* ty=Tensor[(2), float32] */, %v_param_69: Tensor[(1, 1, 96, 6), float32] /* ty=Tensor[(1, 1, 96, 6), float32] */, %v_param_70: Tensor[(6), float32] /* ty=Tensor[(6), float32] */, output_tensor_names=["regressors", "classificators"]) -> (Tensor[(1, 896, 16), float32], Tensor[(1, 896, 1), float32]) {
  %0 = layout_transform(%input, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 3, 128, 128), float32] */;
  %1 = layout_transform(%v_param_1, src_layout="HWIO", dst_layout="OIHW") /* ty=Tensor[(24, 3, 5, 5), float32] */;
  %2 = nn.conv2d(%0, %1, strides=[2, 2], padding=[1, 1, 2, 2], channels=24, kernel_size=[5, 5]) /* ty=Tensor[(1, 24, 64, 64), float32] */;
  %3 = layout_transform(%2, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 64, 64, 24), float32] */;
  %4 = nn.bias_add(%3, %v_param_2, axis=3) /* ty=Tensor[(1, 64, 64, 24), float32] */;
  %5 = nn.relu(%4) /* ty=Tensor[(1, 64, 64, 24), float32] */;
  %6 = layout_transform(%5, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 24, 64, 64), float32] */;
  %7 = layout_transform(%v_param_3, src_layout="HWOI", dst_layout="OIHW") /* ty=Tensor[(24, 1, 3, 3), float32] */;
  %8 = nn.conv2d(%6, %7, padding=[1, 1, 1, 1], groups=24, channels=24, kernel_size=[3, 3]) /* ty=Tensor[(1, 24, 64, 64), float32] */;
  %9 = layout_transform(%8, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 64, 64, 24), float32] */;
  %10 = nn.bias_add(%9, %v_param_4, axis=3) /* ty=Tensor[(1, 64, 64, 24), float32] */;
  %11 = layout_transform(%10, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 24, 64, 64), float32] */;
  %12 = layout_transform(%v_param_5, src_layout="HWIO", dst_layout="OIHW") /* ty=Tensor[(24, 24, 1, 1), float32] */;
  %13 = nn.conv2d(%11, %12, padding=[0, 0, 0, 0], channels=24, kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 64, 64), float32] */;
  %14 = layout_transform(%13, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 64, 64, 24), float32] */;
  %15 = nn.bias_add(%14, %v_param_6, axis=3) /* ty=Tensor[(1, 64, 64, 24), float32] */;
  %16 = add(%5, %15) /* ty=Tensor[(1, 64, 64, 24), float32] */;
  %17 = nn.relu(%16) /* ty=Tensor[(1, 64, 64, 24), float32] */;
  %18 = layout_transform(%17, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 24, 64, 64), float32] */;
  %19 = layout_transform(%v_param_7, src_layout="HWOI", dst_layout="OIHW") /* ty=Tensor[(24, 1, 3, 3), float32] */;
  %20 = nn.conv2d(%18, %19, padding=[1, 1, 1, 1], groups=24, channels=24, kernel_size=[3, 3]) /* ty=Tensor[(1, 24, 64, 64), float32] */;
  %21 = layout_transform(%20, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 64, 64, 24), float32] */;
  %22 = nn.bias_add(%21, %v_param_8, axis=3) /* ty=Tensor[(1, 64, 64, 24), float32] */;
  %23 = layout_transform(%22, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 24, 64, 64), float32] */;
  %24 = layout_transform(%v_param_9, src_layout="HWIO", dst_layout="OIHW") /* ty=Tensor[(28, 24, 1, 1), float32] */;
  %25 = nn.conv2d(%23, %24, padding=[0, 0, 0, 0], channels=28, kernel_size=[1, 1]) /* ty=Tensor[(1, 28, 64, 64), float32] */;
  %26 = layout_transform(%25, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 64, 64, 28), float32] */;
  %27 = nn.pad(%17, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 4]]) /* ty=Tensor[(1, 64, 64, 28), float32] */;
  %28 = nn.bias_add(%26, %v_param_10, axis=3) /* ty=Tensor[(1, 64, 64, 28), float32] */;
  %29 = add(%27, %28) /* ty=Tensor[(1, 64, 64, 28), float32] */;
  %30 = nn.relu(%29) /* ty=Tensor[(1, 64, 64, 28), float32] */;
  %31 = nn.max_pool2d(%30, pool_size=[2, 2], strides=[2, 2], padding=[0, 0, 0, 0], layout="NHWC") /* ty=Tensor[(1, 32, 32, 28), float32] */;
  %32 = layout_transform(%30, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 28, 64, 64), float32] */;
  %33 = layout_transform(%v_param_11, src_layout="HWOI", dst_layout="OIHW") /* ty=Tensor[(28, 1, 3, 3), float32] */;
  %34 = nn.conv2d(%32, %33, strides=[2, 2], padding=[0, 0, 1, 1], groups=28, channels=28, kernel_size=[3, 3]) /* ty=Tensor[(1, 28, 32, 32), float32] */;
  %35 = layout_transform(%34, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 32, 32, 28), float32] */;
  %36 = nn.bias_add(%35, %v_param_12, axis=3) /* ty=Tensor[(1, 32, 32, 28), float32] */;
  %37 = layout_transform(%36, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 28, 32, 32), float32] */;
  %38 = layout_transform(%v_param_13, src_layout="HWIO", dst_layout="OIHW") /* ty=Tensor[(32, 28, 1, 1), float32] */;
  %39 = nn.conv2d(%37, %38, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %40 = layout_transform(%39, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %41 = nn.pad(%31, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 4]]) /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %42 = nn.bias_add(%40, %v_param_14, axis=3) /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %43 = add(%41, %42) /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %44 = nn.relu(%43) /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %45 = layout_transform(%44, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %46 = layout_transform(%v_param_15, src_layout="HWOI", dst_layout="OIHW") /* ty=Tensor[(32, 1, 3, 3), float32] */;
  %47 = nn.conv2d(%45, %46, padding=[1, 1, 1, 1], groups=32, channels=32, kernel_size=[3, 3]) /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %48 = layout_transform(%47, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %49 = nn.bias_add(%48, %v_param_16, axis=3) /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %50 = layout_transform(%49, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %51 = layout_transform(%v_param_17, src_layout="HWIO", dst_layout="OIHW") /* ty=Tensor[(36, 32, 1, 1), float32] */;
  %52 = nn.conv2d(%50, %51, padding=[0, 0, 0, 0], channels=36, kernel_size=[1, 1]) /* ty=Tensor[(1, 36, 32, 32), float32] */;
  %53 = layout_transform(%52, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 32, 32, 36), float32] */;
  %54 = nn.pad(%44, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 4]]) /* ty=Tensor[(1, 32, 32, 36), float32] */;
  %55 = nn.bias_add(%53, %v_param_18, axis=3) /* ty=Tensor[(1, 32, 32, 36), float32] */;
  %56 = add(%54, %55) /* ty=Tensor[(1, 32, 32, 36), float32] */;
  %57 = nn.relu(%56) /* ty=Tensor[(1, 32, 32, 36), float32] */;
  %58 = layout_transform(%57, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 36, 32, 32), float32] */;
  %59 = layout_transform(%v_param_19, src_layout="HWOI", dst_layout="OIHW") /* ty=Tensor[(36, 1, 3, 3), float32] */;
  %60 = nn.conv2d(%58, %59, padding=[1, 1, 1, 1], groups=36, channels=36, kernel_size=[3, 3]) /* ty=Tensor[(1, 36, 32, 32), float32] */;
  %61 = layout_transform(%60, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 32, 32, 36), float32] */;
  %62 = nn.bias_add(%61, %v_param_20, axis=3) /* ty=Tensor[(1, 32, 32, 36), float32] */;
  %63 = layout_transform(%62, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 36, 32, 32), float32] */;
  %64 = layout_transform(%v_param_21, src_layout="HWIO", dst_layout="OIHW") /* ty=Tensor[(42, 36, 1, 1), float32] */;
  %65 = nn.conv2d(%63, %64, padding=[0, 0, 0, 0], channels=42, kernel_size=[1, 1]) /* ty=Tensor[(1, 42, 32, 32), float32] */;
  %66 = layout_transform(%65, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 32, 32, 42), float32] */;
  %67 = nn.pad(%57, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 6]]) /* ty=Tensor[(1, 32, 32, 42), float32] */;
  %68 = nn.bias_add(%66, %v_param_22, axis=3) /* ty=Tensor[(1, 32, 32, 42), float32] */;
  %69 = add(%67, %68) /* ty=Tensor[(1, 32, 32, 42), float32] */;
  %70 = nn.relu(%69) /* ty=Tensor[(1, 32, 32, 42), float32] */;
  %71 = nn.max_pool2d(%70, pool_size=[2, 2], strides=[2, 2], padding=[0, 0, 0, 0], layout="NHWC") /* ty=Tensor[(1, 16, 16, 42), float32] */;
  %72 = layout_transform(%70, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 42, 32, 32), float32] */;
  %73 = layout_transform(%v_param_23, src_layout="HWOI", dst_layout="OIHW") /* ty=Tensor[(42, 1, 3, 3), float32] */;
  %74 = nn.conv2d(%72, %73, strides=[2, 2], padding=[0, 0, 1, 1], groups=42, channels=42, kernel_size=[3, 3]) /* ty=Tensor[(1, 42, 16, 16), float32] */;
  %75 = layout_transform(%74, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 16, 16, 42), float32] */;
  %76 = nn.bias_add(%75, %v_param_24, axis=3) /* ty=Tensor[(1, 16, 16, 42), float32] */;
  %77 = layout_transform(%76, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 42, 16, 16), float32] */;
  %78 = layout_transform(%v_param_25, src_layout="HWIO", dst_layout="OIHW") /* ty=Tensor[(48, 42, 1, 1), float32] */;
  %79 = nn.conv2d(%77, %78, padding=[0, 0, 0, 0], channels=48, kernel_size=[1, 1]) /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %80 = layout_transform(%79, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 16, 16, 48), float32] */;
  %81 = nn.pad(%71, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 6]]) /* ty=Tensor[(1, 16, 16, 48), float32] */;
  %82 = nn.bias_add(%80, %v_param_26, axis=3) /* ty=Tensor[(1, 16, 16, 48), float32] */;
  %83 = add(%81, %82) /* ty=Tensor[(1, 16, 16, 48), float32] */;
  %84 = nn.relu(%83) /* ty=Tensor[(1, 16, 16, 48), float32] */;
  %85 = layout_transform(%84, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %86 = layout_transform(%v_param_27, src_layout="HWOI", dst_layout="OIHW") /* ty=Tensor[(48, 1, 3, 3), float32] */;
  %87 = nn.conv2d(%85, %86, padding=[1, 1, 1, 1], groups=48, channels=48, kernel_size=[3, 3]) /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %88 = layout_transform(%87, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 16, 16, 48), float32] */;
  %89 = nn.bias_add(%88, %v_param_28, axis=3) /* ty=Tensor[(1, 16, 16, 48), float32] */;
  %90 = layout_transform(%89, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 48, 16, 16), float32] */;
  %91 = layout_transform(%v_param_29, src_layout="HWIO", dst_layout="OIHW") /* ty=Tensor[(56, 48, 1, 1), float32] */;
  %92 = nn.conv2d(%90, %91, padding=[0, 0, 0, 0], channels=56, kernel_size=[1, 1]) /* ty=Tensor[(1, 56, 16, 16), float32] */;
  %93 = layout_transform(%92, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 16, 16, 56), float32] */;
  %94 = nn.pad(%84, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 8]]) /* ty=Tensor[(1, 16, 16, 56), float32] */;
  %95 = nn.bias_add(%93, %v_param_30, axis=3) /* ty=Tensor[(1, 16, 16, 56), float32] */;
  %96 = add(%94, %95) /* ty=Tensor[(1, 16, 16, 56), float32] */;
  %97 = nn.relu(%96) /* ty=Tensor[(1, 16, 16, 56), float32] */;
  %98 = layout_transform(%97, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 56, 16, 16), float32] */;
  %99 = layout_transform(%v_param_31, src_layout="HWOI", dst_layout="OIHW") /* ty=Tensor[(56, 1, 3, 3), float32] */;
  %100 = nn.conv2d(%98, %99, padding=[1, 1, 1, 1], groups=56, channels=56, kernel_size=[3, 3]) /* ty=Tensor[(1, 56, 16, 16), float32] */;
  %101 = layout_transform(%100, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 16, 16, 56), float32] */;
  %102 = nn.bias_add(%101, %v_param_32, axis=3) /* ty=Tensor[(1, 16, 16, 56), float32] */;
  %103 = layout_transform(%102, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 56, 16, 16), float32] */;
  %104 = layout_transform(%v_param_33, src_layout="HWIO", dst_layout="OIHW") /* ty=Tensor[(64, 56, 1, 1), float32] */;
  %105 = nn.conv2d(%103, %104, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 16, 16), float32] */;
  %106 = layout_transform(%105, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 16, 16, 64), float32] */;
  %107 = nn.pad(%97, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 8]]) /* ty=Tensor[(1, 16, 16, 64), float32] */;
  %108 = nn.bias_add(%106, %v_param_34, axis=3) /* ty=Tensor[(1, 16, 16, 64), float32] */;
  %109 = add(%107, %108) /* ty=Tensor[(1, 16, 16, 64), float32] */;
  %110 = nn.relu(%109) /* ty=Tensor[(1, 16, 16, 64), float32] */;
  %111 = layout_transform(%110, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 64, 16, 16), float32] */;
  %112 = layout_transform(%v_param_35, src_layout="HWOI", dst_layout="OIHW") /* ty=Tensor[(64, 1, 3, 3), float32] */;
  %113 = nn.conv2d(%111, %112, padding=[1, 1, 1, 1], groups=64, channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 16, 16), float32] */;
  %114 = layout_transform(%113, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 16, 16, 64), float32] */;
  %115 = nn.bias_add(%114, %v_param_36, axis=3) /* ty=Tensor[(1, 16, 16, 64), float32] */;
  %116 = layout_transform(%115, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 64, 16, 16), float32] */;
  %117 = layout_transform(%v_param_37, src_layout="HWIO", dst_layout="OIHW") /* ty=Tensor[(72, 64, 1, 1), float32] */;
  %118 = nn.conv2d(%116, %117, padding=[0, 0, 0, 0], channels=72, kernel_size=[1, 1]) /* ty=Tensor[(1, 72, 16, 16), float32] */;
  %119 = layout_transform(%118, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 16, 16, 72), float32] */;
  %120 = nn.pad(%110, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 8]]) /* ty=Tensor[(1, 16, 16, 72), float32] */;
  %121 = nn.bias_add(%119, %v_param_38, axis=3) /* ty=Tensor[(1, 16, 16, 72), float32] */;
  %122 = add(%120, %121) /* ty=Tensor[(1, 16, 16, 72), float32] */;
  %123 = nn.relu(%122) /* ty=Tensor[(1, 16, 16, 72), float32] */;
  %124 = layout_transform(%123, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 72, 16, 16), float32] */;
  %125 = layout_transform(%v_param_39, src_layout="HWOI", dst_layout="OIHW") /* ty=Tensor[(72, 1, 3, 3), float32] */;
  %126 = nn.conv2d(%124, %125, padding=[1, 1, 1, 1], groups=72, channels=72, kernel_size=[3, 3]) /* ty=Tensor[(1, 72, 16, 16), float32] */;
  %127 = layout_transform(%126, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 16, 16, 72), float32] */;
  %128 = nn.bias_add(%127, %v_param_40, axis=3) /* ty=Tensor[(1, 16, 16, 72), float32] */;
  %129 = layout_transform(%128, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 72, 16, 16), float32] */;
  %130 = layout_transform(%v_param_41, src_layout="HWIO", dst_layout="OIHW") /* ty=Tensor[(80, 72, 1, 1), float32] */;
  %131 = nn.conv2d(%129, %130, padding=[0, 0, 0, 0], channels=80, kernel_size=[1, 1]) /* ty=Tensor[(1, 80, 16, 16), float32] */;
  %132 = layout_transform(%131, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 16, 16, 80), float32] */;
  %133 = nn.pad(%123, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 8]]) /* ty=Tensor[(1, 16, 16, 80), float32] */;
  %134 = nn.bias_add(%132, %v_param_42, axis=3) /* ty=Tensor[(1, 16, 16, 80), float32] */;
  %135 = add(%133, %134) /* ty=Tensor[(1, 16, 16, 80), float32] */;
  %136 = nn.relu(%135) /* ty=Tensor[(1, 16, 16, 80), float32] */;
  %137 = layout_transform(%136, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 80, 16, 16), float32] */;
  %138 = layout_transform(%v_param_43, src_layout="HWOI", dst_layout="OIHW") /* ty=Tensor[(80, 1, 3, 3), float32] */;
  %139 = nn.conv2d(%137, %138, padding=[1, 1, 1, 1], groups=80, channels=80, kernel_size=[3, 3]) /* ty=Tensor[(1, 80, 16, 16), float32] */;
  %140 = layout_transform(%139, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 16, 16, 80), float32] */;
  %141 = nn.bias_add(%140, %v_param_44, axis=3) /* ty=Tensor[(1, 16, 16, 80), float32] */;
  %142 = layout_transform(%141, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 80, 16, 16), float32] */;
  %143 = layout_transform(%v_param_45, src_layout="HWIO", dst_layout="OIHW") /* ty=Tensor[(88, 80, 1, 1), float32] */;
  %144 = nn.conv2d(%142, %143, padding=[0, 0, 0, 0], channels=88, kernel_size=[1, 1]) /* ty=Tensor[(1, 88, 16, 16), float32] */;
  %145 = layout_transform(%144, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 16, 16, 88), float32] */;
  %146 = nn.pad(%136, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 8]]) /* ty=Tensor[(1, 16, 16, 88), float32] */;
  %147 = nn.bias_add(%145, %v_param_46, axis=3) /* ty=Tensor[(1, 16, 16, 88), float32] */;
  %148 = add(%146, %147) /* ty=Tensor[(1, 16, 16, 88), float32] */;
  %149 = nn.relu(%148) /* ty=Tensor[(1, 16, 16, 88), float32] */;
  %150 = layout_transform(%149, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 88, 16, 16), float32] */;
  %151 = layout_transform(%v_param_71, src_layout="HWIO", dst_layout="OIHW") /* ty=Tensor[(32, 88, 1, 1), float32] */;
  %152 = nn.conv2d(%150, %151, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %153 = layout_transform(%152, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 16, 16, 32), float32] */;
  %154 = nn.bias_add(%153, %v_param_72, axis=3) /* ty=Tensor[(1, 16, 16, 32), float32] */;
  %155 = nn.max_pool2d(%149, pool_size=[2, 2], strides=[2, 2], padding=[0, 0, 0, 0], layout="NHWC") /* ty=Tensor[(1, 8, 8, 88), float32] */;
  %156 = layout_transform(%v_param_47, src_layout="HWOI", dst_layout="OIHW") /* ty=Tensor[(88, 1, 3, 3), float32] */;
  %157 = nn.conv2d(%150, %156, strides=[2, 2], padding=[0, 0, 1, 1], groups=88, channels=88, kernel_size=[3, 3]) /* ty=Tensor[(1, 88, 8, 8), float32] */;
  %158 = layout_transform(%157, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 8, 8, 88), float32] */;
  %159 = nn.bias_add(%158, %v_param_48, axis=3) /* ty=Tensor[(1, 8, 8, 88), float32] */;
  %160 = layout_transform(%159, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 88, 8, 8), float32] */;
  %161 = layout_transform(%v_param_49, src_layout="HWIO", dst_layout="OIHW") /* ty=Tensor[(96, 88, 1, 1), float32] */;
  %162 = nn.conv2d(%160, %161, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %163 = layout_transform(%162, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 8, 8, 96), float32] */;
  %164 = nn.pad(%155, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 8]]) /* ty=Tensor[(1, 8, 8, 96), float32] */;
  %165 = nn.bias_add(%163, %v_param_50, axis=3) /* ty=Tensor[(1, 8, 8, 96), float32] */;
  %166 = add(%164, %165) /* ty=Tensor[(1, 8, 8, 96), float32] */;
  %167 = nn.relu(%166) /* ty=Tensor[(1, 8, 8, 96), float32] */;
  %168 = layout_transform(%167, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %169 = layout_transform(%v_param_51, src_layout="HWOI", dst_layout="OIHW") /* ty=Tensor[(96, 1, 3, 3), float32] */;
  %170 = nn.conv2d(%168, %169, padding=[1, 1, 1, 1], groups=96, channels=96, kernel_size=[3, 3]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %171 = layout_transform(%170, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 8, 8, 96), float32] */;
  %172 = nn.bias_add(%171, %v_param_52, axis=3) /* ty=Tensor[(1, 8, 8, 96), float32] */;
  %173 = layout_transform(%172, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %174 = layout_transform(%v_param_53, src_layout="HWIO", dst_layout="OIHW") /* ty=Tensor[(96, 96, 1, 1), float32] */;
  %175 = nn.conv2d(%173, %174, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %176 = layout_transform(%175, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 8, 8, 96), float32] */;
  %177 = nn.bias_add(%176, %v_param_54, axis=3) /* ty=Tensor[(1, 8, 8, 96), float32] */;
  %178 = add(%167, %177) /* ty=Tensor[(1, 8, 8, 96), float32] */;
  %179 = nn.relu(%178) /* ty=Tensor[(1, 8, 8, 96), float32] */;
  %180 = layout_transform(%179, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %181 = layout_transform(%v_param_55, src_layout="HWOI", dst_layout="OIHW") /* ty=Tensor[(96, 1, 3, 3), float32] */;
  %182 = nn.conv2d(%180, %181, padding=[1, 1, 1, 1], groups=96, channels=96, kernel_size=[3, 3]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %183 = layout_transform(%182, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 8, 8, 96), float32] */;
  %184 = nn.bias_add(%183, %v_param_56, axis=3) /* ty=Tensor[(1, 8, 8, 96), float32] */;
  %185 = layout_transform(%184, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %186 = layout_transform(%v_param_57, src_layout="HWIO", dst_layout="OIHW") /* ty=Tensor[(96, 96, 1, 1), float32] */;
  %187 = nn.conv2d(%185, %186, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %188 = layout_transform(%187, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 8, 8, 96), float32] */;
  %189 = nn.bias_add(%188, %v_param_58, axis=3) /* ty=Tensor[(1, 8, 8, 96), float32] */;
  %190 = add(%179, %189) /* ty=Tensor[(1, 8, 8, 96), float32] */;
  %191 = nn.relu(%190) /* ty=Tensor[(1, 8, 8, 96), float32] */;
  %192 = layout_transform(%191, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %193 = layout_transform(%v_param_59, src_layout="HWOI", dst_layout="OIHW") /* ty=Tensor[(96, 1, 3, 3), float32] */;
  %194 = nn.conv2d(%192, %193, padding=[1, 1, 1, 1], groups=96, channels=96, kernel_size=[3, 3]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %195 = layout_transform(%194, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 8, 8, 96), float32] */;
  %196 = nn.bias_add(%195, %v_param_60, axis=3) /* ty=Tensor[(1, 8, 8, 96), float32] */;
  %197 = layout_transform(%196, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %198 = layout_transform(%v_param_61, src_layout="HWIO", dst_layout="OIHW") /* ty=Tensor[(96, 96, 1, 1), float32] */;
  %199 = nn.conv2d(%197, %198, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %200 = layout_transform(%199, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 8, 8, 96), float32] */;
  %201 = nn.bias_add(%200, %v_param_62, axis=3) /* ty=Tensor[(1, 8, 8, 96), float32] */;
  %202 = add(%191, %201) /* ty=Tensor[(1, 8, 8, 96), float32] */;
  %203 = nn.relu(%202) /* ty=Tensor[(1, 8, 8, 96), float32] */;
  %204 = layout_transform(%203, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %205 = layout_transform(%v_param_63, src_layout="HWOI", dst_layout="OIHW") /* ty=Tensor[(96, 1, 3, 3), float32] */;
  %206 = nn.conv2d(%204, %205, padding=[1, 1, 1, 1], groups=96, channels=96, kernel_size=[3, 3]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %207 = layout_transform(%206, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 8, 8, 96), float32] */;
  %208 = nn.bias_add(%207, %v_param_64, axis=3) /* ty=Tensor[(1, 8, 8, 96), float32] */;
  %209 = layout_transform(%208, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %210 = layout_transform(%v_param_65, src_layout="HWIO", dst_layout="OIHW") /* ty=Tensor[(96, 96, 1, 1), float32] */;
  %211 = nn.conv2d(%209, %210, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %212 = layout_transform(%211, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 8, 8, 96), float32] */;
  %213 = nn.bias_add(%212, %v_param_66, axis=3) /* ty=Tensor[(1, 8, 8, 96), float32] */;
  %214 = add(%203, %213) /* ty=Tensor[(1, 8, 8, 96), float32] */;
  %215 = nn.relu(%214) /* ty=Tensor[(1, 8, 8, 96), float32] */;
  %216 = layout_transform(%215, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %217 = layout_transform(%v_param_73, src_layout="HWIO", dst_layout="OIHW") /* ty=Tensor[(96, 96, 1, 1), float32] */;
  %218 = nn.conv2d(%216, %217, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 8, 8), float32] */;
  %219 = layout_transform(%218, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 8, 8, 96), float32] */;
  %220 = nn.bias_add(%219, %v_param_74, axis=3) /* ty=Tensor[(1, 8, 8, 96), float32] */;
  %221 = reshape(%154, newshape=[1, -1, 16]) /* ty=Tensor[(1, 512, 16), float32] */;
  %222 = reshape(%220, newshape=[1, -1, 16]) /* ty=Tensor[(1, 384, 16), float32] */;
  %223 = (%221, %222) /* ty=(Tensor[(1, 512, 16), float32], Tensor[(1, 384, 16), float32]) */;
  %224 = layout_transform(%v_param_67, src_layout="HWIO", dst_layout="OIHW") /* ty=Tensor[(2, 88, 1, 1), float32] */;
  %225 = nn.conv2d(%150, %224, padding=[0, 0, 0, 0], channels=2, kernel_size=[1, 1]) /* ty=Tensor[(1, 2, 16, 16), float32] */;
  %226 = layout_transform(%225, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 16, 16, 2), float32] */;
  %227 = nn.bias_add(%226, %v_param_68, axis=3) /* ty=Tensor[(1, 16, 16, 2), float32] */;
  %228 = layout_transform(%v_param_69, src_layout="HWIO", dst_layout="OIHW") /* ty=Tensor[(6, 96, 1, 1), float32] */;
  %229 = nn.conv2d(%216, %228, padding=[0, 0, 0, 0], channels=6, kernel_size=[1, 1]) /* ty=Tensor[(1, 6, 8, 8), float32] */;
  %230 = layout_transform(%229, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 8, 8, 6), float32] */;
  %231 = nn.bias_add(%230, %v_param_70, axis=3) /* ty=Tensor[(1, 8, 8, 6), float32] */;
  %232 = reshape(%227, newshape=[1, -1, 1]) /* ty=Tensor[(1, 512, 1), float32] */;
  %233 = reshape(%231, newshape=[1, -1, 1]) /* ty=Tensor[(1, 384, 1), float32] */;
  %234 = (%232, %233) /* ty=(Tensor[(1, 512, 1), float32], Tensor[(1, 384, 1), float32]) */;
  %235 = concatenate(%223, axis=1) /* ty=Tensor[(1, 896, 16), float32] */;
  %236 = concatenate(%234, axis=1) /* ty=Tensor[(1, 896, 1), float32] */;
  (%235, %236) /* ty=(Tensor[(1, 896, 16), float32], Tensor[(1, 896, 1), float32]) */
}
